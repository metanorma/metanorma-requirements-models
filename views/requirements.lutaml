diagram requirements {

  class Requirement {
    definition {
      Specification of an attribute of a subject that is required.

      NOTE: A requirement can contain other requirements.
    }

    +obligation: "requirement"
  }

  class Recommendation {
    definition {
      Specification of an attribute of a subject that is recommended.
    }

    +obligation: "recommendation"
  }

  class Permission {
    definition {
      Specification of an attribute of a subject that is permitted.
    }

    +obligation: "permission"
  }

  class Provision {
    +obligation: ObligationType[1..*] {
      definition {
        An attribute that may be used to override the obligation represented in
        the tag name of the top level containers.

        Legal values are `requirement`, `recommendation`, `permission`, and can
        be comma-delimited.
      }
    }

    +id: String {
      definition {
        Unique identifier of the provision.
      }
    }

    +unnumbered: Boolean[0..1] {
      definition {
        Whether this provision is unnumbered.
      }
    }

    +number: String[0..1]
    +subsequence: String[0..1]

    //+keep-with-next: Boolean[0..1]
    //+keep-lines-together: Boolean[0..1]

    +class: String[0..1] {
      definition {
        Class of provision, used to sequence and label that class separately.
        By default, provisions are sequenced and labelled as requirements, recommendations, or
        permissions, by obligation; the class overrides that.
      }
    }
    +filename: String[0..1] {
      definition {
        File name of the requirement model when exported.
      }
    }

    +title: FormattedString[0..1] {
      definition {
        Human-readable title of the requirement.
      }
    }

    +identifier: FormattedString[0..1] {
      definition {
        Formal identifier with which the requirement is referenced.
      }
    }

    +subject: String[0..*] {
      definition {
        The party subject to the obligation stated in the requirement.
      }
    }

    +inherit: String[0..*] {
      definition {
        Reference to the identifier of another requirement, of which this requirement
        is a subclass, and from which it inherits attributes.
      }
    }

    +model: String[0..1] {
       definition {
         Model of requirements realised by this requirement, e.g. "ogc" for Modspec
       }
    }

    +type: String[0..1] {
       definition {
         Type of requirement; does not override labelling, unlike `class`
       }
    }

    +classification: ClassificationType[0..*] {
      definition {
        Key/Value pairs of metadata used to describe the requirement. A key can
        be associated with multiple values.
      }
    }

    +measurement-target: RequirementSubpart[0..*] {
      definition {
        Quantitative statement of metrics that the requirement realises.
      }
    }

    +specification: RequirementSubpart[0..*] {
      definition {
        Formal specification of the requirement. Expected to be machine-readable.
      }
    }

    +verification: RequirementSubpart[0..*] {
      definition {
        Processes or code used to verify that the requirement is being complied
        with. Can be a test (including test code), or a compliance statement.
      }
    }

    +import: RequirementSubpart[0..*] {
      definition {
        A reference to source code or a statement of prerequisites which is
        defined elsewhere.
      }
    }

    +description: RequirementSubpart[0..*] {
      definition {
        Descriptive statement of the content of the requirement. Is expected to
        be human-readable, and to contain formatting markup following Metanorma
        conventions. Is expected to be discursive, and be resumed after
        interruption by other sub-containers.
      }
    }

    +references: BibliographicItem[0..1] {
      definition {
        A list of references for the requirement, following the
        https://github.com/metanorma/relaton-models[Relaton bibliographic model].
      }
    }

    +component: ClassedRequirementSubpart[0..*] {
      definition {
        Provisions nested within this provision, which cannot be referenced autonomous and have
        subclasses specific to the parent provision. Not expressed with provision metadata.
      }
    }
    +subRequirement: Provision[0..*] { 
      definition {
        Provisions nested within this provision, which are self-standing and do not have
        subclasses specific to the parent provision
      }
    }
  }

  class RequirementSubpart {
    definition {
      A subcontainer can be either machine-readable or human-readable, or a
      mixture of the two.

      A machine-readable component can be included as source code with
      nomination of the language.
    }

    +type: String[0..1] {
      definition {
        Type of sub-container.

        [example]
        A `verification[@type = "unit-test"]` contains a unit test of a single
        feature, and is to be treated differently from
        `verification[@type = "comprehensive"]`, which represents a
        comprehensive test suite.
      }
    }

    +exclude: Boolean[0..1] {
      definition {
        Indicates that the current sub-container is only intended to be
        machine-readable, and is not to be rendered as document output.
      }
    }

    

    +content: Block[0..*]
    //+keep-with-next: Boolean[0..1]
    //+keep-lines-together: Boolean[0..1]
  }

  class ClassedRequirementSubpart {
    +class: String
  }

  class ClassificationType  <<BasicDoc>> {
  }

  enum ObligationType <<enumeration>> {
    requirement
    recommendation
    permission
  }

  class BibliographicItem <<Bibliography>> {
  }

  class Block <<BasicDoc>> {
  }

  association {
    owner Requirement
    member Provision
    member_type inheritance
  }

  association {
    owner Recommendation
    member Provision
    member_type inheritance
  }

  association {
    owner Permission
    member Provision
    member_type inheritance
  }

  association {
    owner RequirementSubpart
    member ClassedRequirementSubpart
    owner_type inheritance
  }

//  association {
//    owner Provision
//    member ObligationType
//    owner_type direct
//  }
//  association {
//    owner Provision
//    member ClassificationType
//    owner_type direct
//  }
//  association {
//    owner Provision
//    member BibliographicItem
//    owner_type direct
//  }
//  association {
//    owner Provision
//    member Block
//    owner_type direct
//  }
//  association {
//    owner Provision
//    member RequirementSubpart
//    owner_type direct
//  }

}
